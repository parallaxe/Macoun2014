//
//  Breakpoint.h
//  XCodeBreakpointGenerator
//
//  Created by Hendrik von Prince on 25/08/14.
//  Copyright (c) 2014 Hendrik von Prince. All rights reserved.
//

// these classes are just helpers for the specific problem and are not related to clang-processing
// you may want to ignore the implementation

#ifndef __XCodeBreakpointGenerator__Breakpoint__
#define __XCodeBreakpointGenerator__Breakpoint__

#include <iostream>
#include <vector>
#include <sstream>

// wraps the sourcelocation
struct FullSourceRange {
  std::string filePath;
  unsigned long startingColumnNumber;
  unsigned long endingColumnNumber;
  unsigned long startingLineNumber;
  unsigned long endingLineNumber;
};

// stores all informations to generate a breakpoint as XML
// that can be copied into the Breakpoints_v2.xcbkptlist-file
// of the corresponding project
class BreakPoint {
  bool shouldBeEnabled;
  int ignoreCount;
  bool continueAfterRunningActions;
  int landmarkType;
  std::string condition;
  
  FullSourceRange sourceRange;
  std::string landmarkName;
  long long timestamp;
  
  std::string id;   // generated by filePath + startingLineNumber
  
  void updateID();
  std::vector<std::string> actions;
  
public:
  BreakPoint();
  
  void setCondition(const std::string &condition);
  void addDebugCommandActionWithCommand(const std::string &message);
  void addDebugLogActionWithMessage(const std::string &message);
  decltype(BreakPoint::sourceRange) getSourceRange() const;
  void setSourceRange(const FullSourceRange &range);
  void setLandmarkName(decltype(landmarkName) landmarkName);
  std::string asXML();
  bool operator<(const BreakPoint &breakpoint) const;
};


#endif /* defined(__XCodeBreakpointGenerator__Breakpoint__) */
